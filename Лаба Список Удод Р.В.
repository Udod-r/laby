class ListNode {
int data;
ListNode next;

// Конструктор для инициализации узла
public ListNode(int data) {
this.data = data;
}
}

// Класс для представления связанного списка
class LinkedList {
ListNode head;

// Метод для добавления элемента в конец списка
public void add(int data) {
ListNode newNode = new ListNode(data);
if (head == null) {
head = newNode;
} else {
ListNode current = head;
while (current.next != null) {
current = current.next;
}
current.next = newNode;
}
}

// Метод для удаления элемента из списка
public void delete(int data) {
if (head != null) {
if (head.data == data) {
head = head.next;
} else {
ListNode current = head;
while (current.next != null && current.next.data != data) {
current = current.next;
}
if (current.next != null) {
current.next = current.next.next;
}
}
}
}

// Метод для отображения элементов списка
public void display() {
ListNode current = head;
while (current != null) {
System.out.print(current.data + " ");
current = current.next;
}
}

// Метод main для тестирования функционала списка
public static void main(String[] args) {
// Создание связанного списка и добавление элементов
LinkedList list = new LinkedList();
list.add(1);
list.add(2);
list.add(3);
list.add(4);

System.out.println("Список:");
list.display(); // Output: 1 2 3 4

// Удаление элемента из списка и отображение списка
list.delete(3);

System.out.println("\nСписок после удаления:");
list.display(); // Output: 1 2 4
}
}
