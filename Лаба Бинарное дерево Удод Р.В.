// Класс для представления узла бинарного дерева
class Node {
int data;
Node left, right;

// Конструктор для инициализации узла
public Node(int item) {
data = item;
left = right = null;
}
}

// Класс для представления бинарного дерева
class BinaryTree {
// Корневой узел дерева
Node root;

// Конструктор для инициализации дерева
BinaryTree() {
root = null;
}

// Метод для вставки нового узла в дерево
void insert(int key) {
root = insertRec(root, key);
}

// Рекурсивный метод для вставки нового узла в дерево
Node insertRec(Node root, int key) {
if (root == null) {
root = new Node(key);
return root;
}
if (key < root.data) {
root.left = insertRec(root.left, key);
} else if (key > root.data) {
root.right = insertRec(root.right, key);
}
return root;
}

// Метод для обхода дерева в порядке (inorder)
void inorder() {
inorderRec(root);
}

// Рекурсивный метод для обхода дерева в порядке (inorder)
void inorderRec(Node root) {
if (root != null) {
inorderRec(root.left);
System.out.print(root.data + " ");
inorderRec(root.right);
}
}

// Метод main для тестирования функционала бинарного дерева
public static void main(String[] args) {
BinaryTree tree = new BinaryTree();
tree.insert(50);
tree.insert(30);
tree.insert(20);
tree.insert(40);
tree.insert(70);
tree.insert(60);
tree.insert(80);

System.out.println("Дерево в порядке (inorder) обхода:");
tree.inorder();
}
}
